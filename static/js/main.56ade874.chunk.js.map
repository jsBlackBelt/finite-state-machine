{"version":3,"sources":["stores/ActorStore.js","stores/ShowsStore.js","stores/StoreContext.js","hooks/useStore.js","fsm/hooks/useStateMachine.js","fsm/FiniteStateMachine.js","fsm/StateMachineContext.js","components/header/styled-components.js","components/header/header.js","hooks/useDebounce.js","components/list/styled-components.js","components/list/list.js","components/tile/styled-components.js","components/tile/Tile.js","components/index.js","pages/home/Home.js","pages/actorDetails/styled-components.js","pages/actorDetails/ActorDetails.js","pages/showDetails/styled-components.js","pages/showDetails/ShowDetails.js","states.js","App.js","serviceWorker.js","index.js"],"names":["createActorStore","actor","setActor","this","name","createShowsStore","shows","show","setShows","setCurrentShow","length","toJS","map","filter","image","storeContext","React","createContext","StoreProvider","children","store","actorStore","useLocalStore","showsStore","Provider","value","useStore","useContext","Error","useStateMachine","fsmContext","createMachine","stateMachineDefinition","machine","transition","event","destinationState","currentState","transitions","target","action","beforeTransition","Object","assign","getStateTransitions","afterTransition","console","log","state","keys","reduce","funcs","capitalize","camelCase","initialState","StateMachineProvider","states","Header","styled","div","history","useHistory","useState","query","setQuery","bedouncedQuery","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","fetch","then","res","json","toHome","push","useObserver","Input","onChange","e","person","List","showsPlain","type","TileTypes","data","key","id","hideSummary","hideName","Tile","Image","character","get","imgSource","onClick","toShow","toActor","season","handleClick","alt","src","summary","replace","Home","Credits","ActorDetails","credits","setCredits","actorId","useParams","credit","_embedded","Characters","ShowDetails","setShow","showId","cast","home","showDetails","actorDetails","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8LAAaA,EAAmB,WAC5B,MAAO,CACHC,MAAO,KACPC,SAFG,SAEMD,GACLE,KAAKF,MAAQA,GAEjB,WACI,OAAOE,KAAKF,MAAQE,KAAKF,MAAMG,KAAO,M,OCLrCC,EAAmB,WAC5B,MAAO,CACHC,MAAO,GACPC,KAAM,KACNC,SAHG,SAGMF,GACLH,KAAKG,MAAQA,GAEjBG,eANG,SAMYF,GACXJ,KAAKI,KAAOA,GAEhB,aACI,OAAOJ,KAAKG,MAAQH,KAAKG,MAAMI,OAAS,GAE5C,iBACI,OAAOC,YAAKR,KAAKG,OACZM,KAAI,SAAAL,GAAI,OAAIA,EAAKA,QACjBM,QAAO,SAAAN,GAAI,OAAIA,EAAKO,YCZxBC,EAAeC,IAAMC,cAAc,MAEnCC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtBC,EAAQ,CACVC,WAAYC,YAActB,GAC1BuB,WAAYD,YAAcjB,IAE9B,OAAO,kBAACU,EAAaS,SAAd,CAAuBC,MAAOL,GAAQD,ICVlC,SAASO,IACpB,IAAMN,EAAQJ,IAAMW,WAAWZ,GAC/B,IAAKK,EAED,MAAM,IAAIQ,MAAM,iDAEpB,OAAOR,ECDIS,MALf,WAEE,OADgBb,IAAMW,WAAWG,I,0CC+BpBC,MAhCf,SAAuBC,GACnB,IAAMC,EAAU,CACZC,WADY,SACDC,GAAQ,IAAD,IAERC,EADyBJ,EAAuB7B,KAAKkC,aAAaZ,OACxBa,YAAYH,EAAMI,QAClE,IAAKH,EACD,MAAM,IAAIR,MAAJ,UAAaO,EAAMI,OAAnB,2CAA4DpC,KAAKkC,aAAaZ,QAWxF,OARK,OAALU,QAAK,IAALA,GAAA,UAAAA,EAAOK,cAAP,eAAeC,mBAAoBN,EAAMK,OAAOC,mBAChDR,EAAQI,aAAeK,OAAOC,OAAO,GAAIV,EAAQW,oBAAoBR,GAAmB,CACpFX,MAAOW,KAEN,OAALD,QAAK,IAALA,GAAA,UAAAA,EAAOK,cAAP,eAAeK,kBAAmBV,EAAMK,OAAOK,kBAE/CC,QAAQC,IAAI,iBAAkBd,EAAQI,aAAaZ,OAE5CQ,EAAQI,cAEnBO,oBAlBY,SAkBQI,GAAQ,IAAD,OACvB,OAAON,OAAOO,KAAKjB,EAAuBgB,GAAOV,aAAaY,QAAO,SAACC,EAAOX,GAEzE,OADAW,EAAM,KAAD,OAAMC,IAAWC,IAAUb,MAAc,SAAAL,GAAK,OAAI,EAAKD,WAAL,aAAiBK,OAAQC,GAAWL,KACpFgB,IACR,MAMX,OAHAlB,EAAQI,aAAeK,OAAOC,OAAO,GAAIV,EAAQW,oBAAoBZ,EAAuBsB,cAAe,CACvG7B,MAAOO,EAAuBsB,eAE3BrB,GC5BEH,EAAad,IAAMC,cAAc,MAEjCsC,EAAuB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQrC,EAAe,EAAfA,SACrCc,EAAUF,EAAcyB,GAE9B,OAAO,kBAAC1B,EAAWN,SAAZ,CAAqBC,MAAOQ,GAAUd,I,uKCPjD,IAMe,GACXsC,OAPWC,IAAOC,IAAV,MCmDGF,EA5CA,WAEX,IAAMG,EAAUC,cAFC,EAGSC,mBAAS,IAHlB,mBAGVC,EAHU,KAGHC,EAHG,KAIXC,ECTK,SAAqBxC,EAAOyC,GAAO,MAEJJ,mBAASrC,GAFL,mBAEzC0C,EAFyC,KAEzBC,EAFyB,KA4BhD,OAxBAC,qBAAU,WAEN,IAAMC,EAAUC,YAAW,WACzBH,EAAkB3C,KACjByC,GAUH,OAAO,WACLM,aAAaF,MAMjB,CAAC7C,EAAOyC,IAGHC,EDnBkBM,CAAYV,EAAO,KACpC9B,EAAUJ,IALC,EAUbH,IAFAH,EARa,EAQbA,WACAF,EATa,EASbA,WAmBJ,OAhBAgD,qBAAU,WAGNK,MAAM,wCAAD,OAAyCT,IACzCU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAArE,GAAK,OAAIiB,EAAWf,SAASF,MAClCqE,MAAK,WACF1C,EAAQI,aAAayC,OAAO,CACxBtC,OAAQ,CACJK,gBAAiB,kBAAMe,EAAQmB,KAAK,cAKrD,CAACd,IAEGe,aAAY,kBACf,kBAAC,EAAOvB,OAAR,KACI,4CAEI,kBAACwB,EAAA,EAAD,CAAOxD,MAAOsC,EAAOmB,SAAU,SAAAC,GAAC,OAAInB,EAASmB,EAAE5C,OAAOd,WAExDF,EAAWhB,MACT,8CAAoBgB,EAAWhB,KAAKH,MAEtCiB,EAAWpB,OACT,+CAAqBoB,EAAWpB,MAAMmF,OAAOhF,KAA7C,U,qIE7ChB,IAMe,GACXiF,KAPS3B,IAAOC,IAAV,MCoBK0B,EAfF,WAAO,IAER9D,EAAeG,IAAfH,WAER,OAAOyD,aAAY,kBACf,kBAAC,EAAOK,KAAR,KACM9D,EAAW+D,WAAW1E,KAAI,SAACL,GACzB,OACI,kBAAC,EAAD,CAAMgF,KAAMC,EAAUjF,KAAMkF,KAAMlF,EAAMmF,IAAKnF,EAAKoF,GAAIC,aAAW,EAACC,UAAQ,Y,kXCZ9F,IAAMC,EAAOpC,IAAOC,IAAV,KAiBK,GACXoC,MAVUrC,IAAOC,IAAV,KAWPmC,QC4DWA,EAzEF,SAAC,GAA2C,IAAzCP,EAAwC,EAAxCA,KAAME,EAAkC,EAAlCA,KAAMG,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAE/BjC,EAAUC,cAFoC,EAMhDnC,IAFAH,EAJgD,EAIhDA,WACAF,EALgD,EAKhDA,WAEEY,EAAUJ,IAPoC,EAmC5C0D,IAASC,EAAUQ,UACZ,CACHC,IAAIR,EAAM,yBAA0B,IACpCQ,IAAIR,EAAM,mBAIdF,IAASC,EAAUvF,MACZ,CACHgG,IAAIR,EAAM,sBAAuB,IACjCQ,IAAIR,EAAM,gBAIX,CACHQ,IAAIR,EAAM,eAAgB,IAC1BQ,IAAIR,EAAM,SAnDkC,mBAuD7CS,EAvD6C,KAuDlC9F,EAvDkC,KAyDpD,OACI,kBAAC,EAAO0F,KAAR,CAAaK,QAAS,kBAjDN,WAChB,OAAOZ,GACH,KAAKC,EAAUjF,KACXgB,EAAWd,eAAegF,GAC1BxD,EAAQI,aAAa+D,OAAO,CACxB5D,OAAQ,CACJK,gBAAiB,kBAAMe,EAAQmB,KAAR,gBAAsBU,EAAKE,SAG1D,MACJ,KAAKH,EAAUQ,UACX3E,EAAWnB,SAASuF,GACpBxD,EAAQI,aAAagE,QAAQ,CACzB7D,OAAQ,CACJK,gBAAiB,kBAAMe,EAAQmB,KAAR,iBAAuBU,EAAKL,OAAOO,SAGlE,MACJ,KAAKH,EAAUc,OACf,KAAKd,EAAUvF,MACf,QACI,QA4BoBsG,KACxB,kBAAC,EAAOR,MAAR,KACI,yBACIS,IAAKpG,EACLqG,IAAKP,KAEPL,GAAYzF,IAEhBwF,GAAeH,EAAKiB,SAClB,6BAAMjB,EAAKiB,QAAQC,QAAQ,gBAAgB,OCxE9CnB,EAAY,CACrBjF,KAAM,WACNN,MAAO,YACP+F,UAAW,gBACXM,OAAQ,cCGGM,MARf,WACE,OACE,6BACI,kBAAC,EAAD,Q,qICJR,IAMe,GACXC,QAPYnD,IAAOC,IAAV,MCkCEmD,MA5Bf,WAAyB,IAAD,EAEUhD,mBAAS,MAFnB,mBAEbiD,EAFa,KAEJC,EAFI,KAGZC,EAAYC,cAAZD,QACA5F,EAAeK,IAAfL,WAUR,OARAgD,qBAAU,WAENK,MAAM,gCAAD,OAAiCuC,EAAjC,4BACAtC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAoC,GAAO,OAAIA,EAAQnG,KAAI,SAAAuG,GAAM,OAAIA,EAAOC,UAAU7G,WACvDoE,MAAK,SAAAoC,GAAO,OAAIC,EAAWD,QACjC,CAACE,IAEGjC,aAAY,kBACf,6BACK3D,EAAWpB,OACR,kBAAC,EAAD,CAAMsF,KAAMC,EAAUvF,MAAOwF,KAAMpE,EAAWpB,QAElD,kBAAC,EAAO4G,QAAR,KACKE,GAAWA,EAAQnG,KAAI,SAAAL,GAAI,OACxB,kBAAC,EAAD,CAAMgF,KAAMC,EAAUjF,KAAMkF,KAAMlF,EAAMqF,aAAW,EAACC,UAAQ,EAACH,IAAKnF,EAAKoF,c,qIC3B3F,IAMe,GACX0B,WAPe3D,IAAOC,IAAV,MCgCD2D,MA5Bf,WAAwB,IAAD,EAEKxD,mBAAS,MAFd,mBAEZvD,EAFY,KAENgH,EAFM,KAGXC,EAAWN,cAAXM,OASR,OAPAnD,qBAAU,WAENK,MAAM,+BAAD,OAAgC8C,EAAhC,kBACA7C,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAApE,GAAI,OAAIgH,EAAQhH,QAC3B,CAACiH,IAGA,6BACKjH,GACG,6BACI,kBAAC,EAAD,CAAMgF,KAAMC,EAAUjF,KAAMkF,KAAMlF,EAAMsF,UAAQ,IAChD,kBAAC,EAAOwB,WAAR,KACK9G,EAAK6G,UAAUK,KAAK7G,KAAI,SAAA6G,GAAI,OACrB,kBAAC,EAAD,CAAMlC,KAAMC,EAAUQ,UAAWP,KAAMgC,EAAM/B,IAAK+B,EAAKzB,UAAUL,YCFlFnC,EAtBA,CACXF,aAAc,OACdoE,KAAM,CACFpF,YAAa,CACT/B,KAAM,cACNmH,KAAM,SAGdC,YAAa,CACTrF,YAAa,CACToF,KAAM,OACNzH,MAAO,iBAGf2H,aAAc,CACVtF,YAAa,CACToF,KAAM,OACNnH,KAAM,iBCmBHsH,MAzBf,WACI,OACI,6BACI,kBAAC,EAAD,CAAsBrE,OAAQA,GAC1B,kBAAC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOsE,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,iBACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,mBACd,kBAAC,EAAD,aCfZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlG,QAAQkG,MAAMA,EAAMC,a","file":"static/js/main.56ade874.chunk.js","sourcesContent":["export const createActorStore = () => {\n    return {\n        actor: null,\n        setActor(actor) {\n            this.actor = actor;\n        },\n        get name() {\n            return this.actor ? this.actor.name : '';\n        },\n    };\n}\n","import { toJS } from \"mobx\";\n\nexport const createShowsStore = () => {\n    return {\n        shows: [],\n        show: null,\n        setShows(shows) {\n            this.shows = shows;\n        },\n        setCurrentShow(show) {\n            this.show = show;\n        },\n        get length() {\n            return this.shows ? this.shows.length : 0;\n        },\n        get showsPlain() {\n            return toJS(this.shows)\n                .map(show => show.show)\n                .filter(show => show.image);\n        }\n    };\n};\n","import React from 'react';\nimport { useLocalStore } from 'mobx-react-lite';\n\nimport { createActorStore } from './ActorStore';\nimport { createShowsStore } from './ShowsStore';\n\nexport const storeContext = React.createContext(null);\n\nexport const StoreProvider = ({ children }) => {\n    const store = {\n        actorStore: useLocalStore(createActorStore),\n        showsStore: useLocalStore(createShowsStore),\n    };\n    return <storeContext.Provider value={store}>{children}</storeContext.Provider>\n}\n","import React from 'react'\nimport { storeContext } from 'stores';\n\nexport default function useStore () {\n    const store = React.useContext(storeContext);\n    if (!store) {\n        // this is especially useful in TypeScript so you don't need to be checking for null all the time\n        throw new Error('useStore must be used within a StoreProvider.')\n    }\n    return store;\n};\n","import React from 'react';\nimport { fsmContext } from '../';\n\nfunction useStateMachine () {\n  const machine = React.useContext(fsmContext);\n  return machine;\n}\n\nexport default useStateMachine;\n","import capitalize from 'lodash/capitalize';\nimport camelCase from 'lodash/camelCase';\n\nfunction createMachine(stateMachineDefinition) {\n    const machine = {\n        transition(event) {\n            const currentStateDefinition = stateMachineDefinition[this.currentState.value];\n            const destinationState = currentStateDefinition.transitions[event.target];\n            if (!destinationState) {\n                throw new Error(`${event.target} is not a valid transition from ${this.currentState.value}`);\n                return;\n            }\n            event?.action?.beforeTransition && event.action.beforeTransition();\n            machine.currentState = Object.assign({}, machine.getStateTransitions(destinationState), {\n                value: destinationState,\n            });\n            event?.action?.afterTransition && event.action.afterTransition();\n\n            console.log('current state:', machine.currentState.value);\n\n            return machine.currentState;\n        },\n        getStateTransitions(state) {\n            return Object.keys(stateMachineDefinition[state].transitions).reduce((funcs, action) => {\n                funcs[`to${capitalize(camelCase(action))}`] = event => this.transition({target: action, ...event});\n                return funcs;\n            }, {});\n        }\n    }\n    machine.currentState = Object.assign({}, machine.getStateTransitions(stateMachineDefinition.initialState), {\n        value: stateMachineDefinition.initialState,\n    });\n    return machine;\n}\n\nexport default createMachine;\n","import React from 'react';\n\nimport { createMachine } from './';\n\nexport const fsmContext = React.createContext(null);\n\nexport const StateMachineProvider = ({ states, children }) => {\n    const machine = createMachine(states);\n\n    return <fsmContext.Provider value={machine}>{children}</fsmContext.Provider>\n}\n","import styled from 'styled-components';\n\nconst Header = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n`;\n\nexport default {\n    Header\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useObserver } from 'mobx-react-lite';\nimport Input from '@material-ui/core/Input';\n\nimport { useStore, useDebounce } from 'hooks';\nimport { useStateMachine } from 'fsm';\nimport Styled from './styled-components';\n\nconst Header = () => {\n\n    const history = useHistory();\n    const [query, setQuery] = useState('');\n    const bedouncedQuery = useDebounce(query, 500);\n    const machine = useStateMachine();\n\n    const {\n        showsStore,\n        actorStore,\n    } = useStore();\n\n    useEffect(() => {\n        // fetch shows based on debounced query\n\n        fetch(`http://api.tvmaze.com/search/shows?q=${bedouncedQuery}`)\n            .then(res => res.json())\n            .then(shows => showsStore.setShows(shows))\n            .then(() => {\n                machine.currentState.toHome({\n                    action: {\n                        afterTransition: () => history.push('/'),\n                    },\n                });\n            });\n\n    }, [bedouncedQuery]);\n\n    return useObserver(() => (\n        <Styled.Header>\n            <div>\n                Search show:\n                <Input value={query} onChange={e => setQuery(e.target.value)} />\n            </div>\n            { showsStore.show &&\n                <div>Current Show: {showsStore.show.name}</div>\n            }\n            { actorStore.actor &&\n                <div>Current Actor: {actorStore.actor.person.name} </div>\n            }\n        </Styled.Header>\n    ));\n};\n\nexport default Header;\n","import { useState, useEffect } from 'react';\n\n\n// Our hook\nexport default function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below).\n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value, delay]\n  );\n\n  return debouncedValue;\n}\n","import styled from 'styled-components';\n\nconst List = styled.div`\n    display: flex;\n    padding: 2rem;\n    flex-wrap: wrap;\n`;\n\nexport default {\n    List\n};\n","import React from 'react';\nimport { useObserver } from 'mobx-react-lite';\n\nimport { useStore } from 'hooks';\nimport { Tile, TileTypes } from 'components'\nimport Styled from './styled-components';\n\nconst List = () => {\n\n    const { showsStore } = useStore();\n\n    return useObserver(() => (\n        <Styled.List>\n            { showsStore.showsPlain.map((show) => {\n                return (\n                    <Tile type={TileTypes.show} data={show} key={show.id} hideSummary hideName />\n                );\n            })}\n        </Styled.List>\n    ));\n};\n\nexport default List;\n","import styled from 'styled-components';\n\n\nconst Tile = styled.div`\n    display: flex;\n    flex-direction: row;\n    cursor: pointer;\n    margin: 1rem;\n    width: fit-content;\n`;\n\nconst Image = styled.div`\n    display: flex;\n    flex-direction: column;\n\n    img: {\n        width: fit-content;\n    }\n`;\n\nexport default {\n    Image,\n    Tile,\n};","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport get from 'lodash/get';\n\nimport { TileTypes } from '../';\nimport { useStore } from 'hooks';\nimport { useStateMachine } from 'fsm';\nimport Styled from './styled-components';\n\nconst Tile = ({ type, data, hideSummary, hideName }) => {\n\n    const history = useHistory();\n    const {\n        showsStore,\n        actorStore,\n    } = useStore();\n    const machine = useStateMachine();\n\n    const handleClick = () => {\n        switch(type) {\n            case TileTypes.show:\n                showsStore.setCurrentShow(data);\n                machine.currentState.toShow({\n                    action: {\n                        afterTransition: () => history.push(`/show/${data.id}`),\n                    },\n                });\n                break;\n            case TileTypes.character:\n                actorStore.setActor(data);\n                machine.currentState.toActor({\n                    action: {\n                        afterTransition: () => history.push(`/actor/${data.person.id}`),\n                    },\n                });\n                break;\n            case TileTypes.season:\n            case TileTypes.actor:\n            default:\n                return;\n        }\n    }\n\n    const processData = () => {\n        if (type === TileTypes.character) {\n            return [\n                get(data, 'character.image.medium', ''),\n                get(data, 'character.name'),\n            ];\n        }\n\n        if (type === TileTypes.actor) {\n            return [\n                get(data, 'person.image.medium', ''),\n                get(data, 'person.name'),\n            ];\n        }\n\n        return [\n            get(data, 'image.medium', ''),\n            get(data, 'name'),\n        ];\n    }\n\n    const [imgSource, name] = processData();\n\n    return (\n        <Styled.Tile onClick={() => handleClick()}>\n            <Styled.Image>\n                <img\n                    alt={name}\n                    src={imgSource}\n                />\n                {!hideName && name}\n            </Styled.Image>\n            {!hideSummary && data.summary &&\n                <div>{data.summary.replace(/(<([^>]+)>)/ig,\"\")}</div>\n            }\n        </Styled.Tile>\n    );\n};\n\nexport default Tile;\n","export { default as Header } from './header/header';\nexport { default as List } from './list/list';\nexport { default as Tile } from './tile/Tile';\n\nexport const TileTypes = {\n    show: 'ShowTile',\n    actor: 'ActorTile',\n    character: 'CharacterTile',\n    season: 'SeasonTile',\n};\n","import React from 'react';\nimport { List } from 'components';\n\nfunction Home() {\n  return (\n    <div>\n        <List></List>\n    </div>\n  );\n}\n\nexport default Home;\n","import styled from 'styled-components';\n\nconst Credits = styled.div`\n    display: flex;\n    padding: 2rem;\n    flex-wrap: wrap;\n`;\n\nexport default {\n    Credits\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useObserver } from 'mobx-react-lite';\n\nimport { useStore } from 'hooks';\nimport { Tile, TileTypes } from 'components';\nimport Styled from './styled-components';\n\nfunction ActorDetails() {\n\n    const [credits, setCredits] = useState(null);\n    const { actorId } = useParams();\n    const { actorStore } = useStore();\n\n    useEffect(() => {\n        // fetch actor credits (which shows he/she played in)\n        fetch(`http://api.tvmaze.com/people/${actorId}/castcredits?embed=show`)\n            .then(res => res.json())\n            .then(credits => credits.map(credit => credit._embedded.show))\n            .then(credits => setCredits(credits));\n    }, [actorId])\n\n    return useObserver(() => (\n        <div>\n            {actorStore.actor && (\n                <Tile type={TileTypes.actor} data={actorStore.actor} />\n            )}\n            <Styled.Credits>\n                {credits && credits.map(show => (\n                    <Tile type={TileTypes.show} data={show} hideSummary hideName key={show.id}/>\n                ))}\n            </Styled.Credits>\n        </div>\n    ));\n}\n\nexport default ActorDetails;\n","import styled from 'styled-components';\n\nconst Characters = styled.div`\n    display: flex;\n    padding: 2rem;\n    flex-wrap: wrap;\n`;\n\nexport default {\n    Characters\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Tile, TileTypes } from 'components';\nimport Styled from './styled-components';\n\nfunction ShowDetails() {\n\n    const [show, setShow] = useState(null);\n    const { showId } = useParams();\n\n    useEffect(() => {\n        // fetch show with embedded cast\n        fetch(`http://api.tvmaze.com/shows/${showId}?embed[]=cast`)\n            .then(res => res.json())\n            .then(show => setShow(show));\n    }, [showId])\n\n    return (\n        <div>\n            {show && (\n                <div>\n                    <Tile type={TileTypes.show} data={show} hideName />\n                    <Styled.Characters>\n                        {show._embedded.cast.map(cast => (\n                                <Tile type={TileTypes.character} data={cast} key={cast.character.id}/>\n                        ))}\n                    </Styled.Characters>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default ShowDetails;\n","\nconst states = {\n    initialState: 'home',\n    home: {\n        transitions: {\n            show: 'showDetails',\n            home: 'home',\n        },\n    },\n    showDetails: {\n        transitions: {\n            home: 'home',\n            actor: 'actorDetails',\n        },\n    },\n    actorDetails: {\n        transitions: {\n            home: 'home',\n            show: 'showDetails',\n        },\n    }\n};\n\nexport default states;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Header } from './components';\nimport {\n    Home,\n    ActorDetails,\n    ShowDetails,\n} from 'pages';\nimport { StoreProvider } from 'stores';\nimport { StateMachineProvider } from './fsm';\nimport states from './states';\n\nfunction App() {\n    return (\n        <div>\n            <StateMachineProvider states={states}>\n                <StoreProvider>\n                    <Router>\n                        <Header></Header>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <Home />\n                            </Route>\n                            <Route exact path=\"/show/:showId\">\n                                <ShowDetails />\n                            </Route>\n                            <Route exact path=\"/actor/:actorId\">\n                                <ActorDetails />\n                            </Route>\n                        </Switch>\n                    </Router>\n                </StoreProvider>\n            </StateMachineProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}